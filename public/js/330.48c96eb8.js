"use strict";(self["webpackChunkassessment_test_app"]=self["webpackChunkassessment_test_app"]||[]).push([[330],{2330:function(e,a,t){t.r(a),t.d(a,{default:function(){return p}});var s=t(3396);const i={class:"standard-form"},l={class:"d-flex"},m={class:"d-flex"},d=(0,s.Uk)(" Add a exam window "),n=(0,s._)("h4",{class:"display-4"},"Exam Windows",-1);function o(e,a,t,o,u,r){const c=(0,s.up)("va-select"),x=(0,s.up)("va-date-input"),p=(0,s.up)("va-divider"),f=(0,s.up)("va-time-input"),w=(0,s.up)("va-button"),h=(0,s.up)("va-form"),v=(0,s.up)("va-data-table");return(0,s.wg)(),(0,s.iD)("div",i,[(0,s.Wm)(h,{ref:"form"},{default:(0,s.w5)((()=>[(0,s.Wm)(c,{label:"Exam",modelValue:u.selectedExam,"onUpdate:modelValue":a[0]||(a[0]=e=>u.selectedExam=e),options:u.exams,rules:[e=>!!e||"Field is required"]},null,8,["modelValue","options","rules"]),(0,s._)("div",l,[(0,s.Wm)(x,{rules:[e=>!!e||"Field Required"],label:"Start Date",modelValue:u.examStartDate,"onUpdate:modelValue":a[1]||(a[1]=e=>u.examStartDate=e)},null,8,["rules","modelValue"]),(0,s.Wm)(p,{vertical:""}),(0,s.Wm)(f,{rules:[e=>!!e||"Field Required"],label:"Start Time",modelValue:u.examStartTime,"onUpdate:modelValue":a[2]||(a[2]=e=>u.examStartTime=e),ampm:""},null,8,["rules","modelValue"])]),(0,s._)("div",m,[(0,s.Wm)(x,{rules:[e=>!!e||"Field Required"],label:"End Date",modelValue:u.examEndDate,"onUpdate:modelValue":a[3]||(a[3]=e=>u.examEndDate=e)},null,8,["rules","modelValue"]),(0,s.Wm)(p,{vertical:""}),(0,s.Wm)(f,{rules:[e=>!!e||"Field Required"],label:"End Time",modelValue:u.examEndTime,"onUpdate:modelValue":a[4]||(a[4]=e=>u.examEndTime=e),ampm:""},null,8,["rules","modelValue"])]),(0,s.Wm)(w,{class:"mb-3",onClick:a[5]||(a[5]=e=>r.addExamWindow())},{default:(0,s.w5)((()=>[d])),_:1})])),_:1},512),n,(0,s.Wm)(v,{items:u.windows},null,8,["items"])])}var u=t(65),r={setup(){const e=(0,s.f3)("$axios"),a=(0,u.oR)(),t=(0,s.f3)("appConfig");return{axios:e,store:a,config:t}},data(){return{exams:[],windows:[],selectedExam:null,examStartDate:new Date,examEndDate:new Date,examStartTime:new Date,examEndTime:new Date}},async created(){const e=await this.axios.get(`${this.config.apiUrl}/api/v1/exams`).catch((function(e){console.log(e)}));this.exams=e.data.map((e=>({text:`${e.name} - ${e.college.name}`,value:e}))),this.reloadData()},methods:{async addExamWindow(){const e=new Date(this.examStartDate);e.setHours(this.examStartTime.getHours(),this.examStartTime.getMinutes());const a=new Date(this.examEndDate);a.setHours(this.examEndTime.getHours(),this.examEndTime.getMinutes());let t=this.store,s=this;this.$refs.form.validate()&&await this.axios.post(`${this.config.apiUrl}/api/v1/exam_windows`,{examId:this.selectedExam.value.id,startDateTime:e,endDateTime:a}).then((function(){t.commit("updateNavBarMessage",{isSuccess:!0,message:"Successfully add the exam window.",isVisible:!0}),s.clearFields(),s.reloadData()})).catch((function(e){t.commit("updateNavBarMessage",{isSuccess:!1,message:e,isVisible:!0})}))},async reloadData(){let e=this;await this.axios.get(`${this.config.apiUrl}/api/v1/exam_windows`).then((function(a){e.windows=a.data.map((e=>({id:e.id,exam:e.exam.name,start:new Date(e.start).toLocaleString(),end:new Date(e.end).toLocaleString()})))})).catch((function(a){e.store.commit("updateNavBarMessage",{isSuccess:!1,message:a,isVisible:!0})}))},clearFields(){this.$refs.form.reset(),setTimeout((()=>{this.$refs.form.resetValidation()}),1)}}},c=t(89);const x=(0,c.Z)(r,[["render",o]]);var p=x}}]);
//# sourceMappingURL=330.48c96eb8.js.map