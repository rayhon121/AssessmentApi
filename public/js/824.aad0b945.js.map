{"version":3,"file":"js/824.aad0b945.js","mappings":"mNAEOA,MAAM,iB,GAoBTC,EAAAA,EAAAA,GAAgC,MAA5BD,MAAM,aAAY,SAAK,G,yKApB7BE,EAAAA,EAAAA,IAsBM,MAtBN,EAsBM,EArBJC,EAAAA,EAAAA,IAkBUC,EAAA,CAlBDC,IAAI,QAAM,C,kBACjB,IAKE,EALFF,EAAAA,EAAAA,IAKEG,EAAA,CAJAC,MAAM,U,WACGC,EAAAA,gB,qCAAAA,EAAAA,gBAAeC,GACvBC,QAASF,EAAAA,SACTG,MAAK,CAAGC,KAAWA,GAAK,sBAJ3B,0CAMAT,EAAAA,EAAAA,IAIEU,EAAA,CAHAN,MAAM,Y,WACGC,EAAAA,S,qCAAAA,EAAAA,SAAQC,GAChBE,MAAK,CAAGC,GAAUA,GAASA,EAAME,OAAM,yBAH1C,gCAKAX,EAAAA,EAAAA,IAKYY,EAAA,CAJVf,MAAM,OACLgB,QAAK,eAAEC,EAAAA,YAFV,C,kBAGC,IACU,UADV,cACUC,EAAAA,EAAAA,IAAEC,EAAAA,WAAS,M,cAhBxB,KAmBAC,GACAjB,EAAAA,EAAAA,IAA+BkB,EAAA,CAAfC,MAAOd,EAAAA,OAAK,mB,aAShC,GACEe,QACE,MAAMC,GAAQC,EAAAA,EAAAA,IAAO,UACfC,GAAQC,EAAAA,EAAAA,MACRC,GAASH,EAAAA,EAAAA,IAAO,aACtB,MAAO,CACLD,QACAE,QACAE,SAEH,EACDC,OACE,MAAO,CACLC,gBAAiB,KACjBC,SAAU,GACVC,SAAU,GACVC,MAAO,GAEV,EACDC,gBACE,MAAMC,QAAwBC,KAAKZ,MAAMa,IAAK,GAAED,KAAKR,OAAOU,0BACvDC,OAAM,SAAUC,GACbC,QAAQC,IAAIF,EACf,IAELJ,KAAKJ,SAAWG,EAAgBN,KAAKc,KAAIC,IAAM,CAAQC,KAAMD,EAAQE,KAAMlC,MAAOgC,MAClFR,KAAKW,YACN,EACDC,QAAS,CACPd,gBACI,IAAIR,EAAQU,KAAKV,MACbuB,EAAOb,KAENA,KAAKc,MAAMC,KAAKC,kBAEfhB,KAAKZ,MAAM6B,KAAM,GAAEjB,KAAKR,OAAOU,sBAAuB,CACxDgB,UAAWlB,KAAKN,gBAAgBlB,MAAM2C,GACtCT,KAAMV,KAAKL,WAEdyB,MAAK,WACJ9B,EAAM+B,OAAO,sBAAuB,CAAEC,WAAW,EAAMC,QAAS,+BAAgCC,WAAW,IAC3GX,EAAKY,cACLZ,EAAKF,YACN,IACAR,OAAM,SAAUC,GACfd,EAAM+B,OAAO,sBAAuB,CAAEC,WAAW,EAAOC,QAASnB,EAAOoB,WAAW,GACpF,GACJ,EACD1B,mBACE,IAAIe,EAAOb,WACLA,KAAKZ,MAAMa,IAAK,GAAED,KAAKR,OAAOU,uBACjCkB,MAAK,SAASM,GACbb,EAAKhB,MAAQ6B,EAASjC,KAAKc,KAAIoB,IAAG,CAC9BR,GAAIQ,EAAKR,GACTT,KAAMiB,EAAKjB,KACXF,QAASmB,EAAKnB,QAAQE,QAE3B,IACAP,OAAM,SAAUC,GACbS,EAAKvB,MAAM+B,OAAO,sBAAuB,CAAEC,WAAW,EAAOC,QAASnB,EAAOoB,WAAW,GAC3F,GACJ,EACDC,cACEzB,KAAKc,MAAMC,KAAKa,QAChBC,YAAW,KACT7B,KAAKc,MAAMC,KAAKe,iBAAhB,GACC,EACL,I,QC9FJ,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://assessment_test_app/./src/pages/exams-page.vue","webpack://assessment_test_app/./src/pages/exams-page.vue?f1fc"],"sourcesContent":["<template>\r\n  \r\n  <div class=\"standard-form\">\r\n    <va-form ref=\"form\">\r\n      <va-select\r\n        label=\"College\"\r\n        v-model=\"selectedCollege\"\r\n        :options=\"colleges\"\r\n        :rules=\"[value => !!value || 'Field is required']\"\r\n      />\r\n      <va-input\r\n        label=\"Exam Name\"\r\n        v-model=\"examName\"\r\n        :rules=\"[value => (value && value.length > 0) || 'Field is required']\"\r\n      />\r\n      <va-button\r\n        class=\"mb-3\"\r\n        @click=\"addExam()\"\r\n      >\r\n        Add exam {{collegeId}}\r\n      </va-button>\r\n    </va-form>    \r\n    <h4 class=\"display-4\">Exams</h4>\r\n    <va-data-table :items=\"exams\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport { inject } from 'vue'\r\nimport { useStore } from 'vuex';\r\n\r\nexport default {\r\n  setup() {\r\n    const axios = inject('$axios');\r\n    const store = useStore()\r\n    const config = inject('appConfig');\r\n    return {\r\n      axios,\r\n      store,\r\n      config\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      selectedCollege: null,\r\n      examName: '',\r\n      colleges: [],\r\n      exams: []\r\n    }\r\n  },\r\n  async created() {\r\n    const collegeResponse = await this.axios.get(`${this.config.apiUrl}/api/v1/colleges`)\r\n        .catch(function (error) {\r\n            console.log(error)\r\n        });\r\n\r\n    this.colleges = collegeResponse.data.map(college => ({ text: college.name, value: college }));\r\n    this.reloadData();\r\n  },\r\n  methods: {\r\n    async addExam() {\r\n        let store = this.store;\r\n        let self = this;\r\n\r\n        if (!this.$refs.form.validate())\r\n          return;\r\n        await this.axios.post(`${this.config.apiUrl}/api/v1/exams`, {\r\n            collegeId: this.selectedCollege.value.id,\r\n            name: this.examName\r\n        })\r\n        .then(function() {              \r\n          store.commit('updateNavBarMessage', { isSuccess: true, message: \"Successfully added the exam.\", isVisible: true }); \r\n          self.clearFields();\r\n          self.reloadData();\r\n        })     \r\n        .catch(function (error) {             \r\n          store.commit('updateNavBarMessage', { isSuccess: false, message: error, isVisible: true }); \r\n        });\r\n    },\r\n    async reloadData() {\r\n      let self = this;\r\n      await this.axios.get(`${this.config.apiUrl}/api/v1/exams`)\r\n        .then(function(response){\r\n          self.exams = response.data.map(exam => ({ \r\n              id: exam.id,\r\n              name: exam.name, \r\n              college: exam.college.name\r\n            }));\r\n        })\r\n        .catch(function (error) {\r\n            self.store.commit('updateNavBarMessage', { isSuccess: false, message: error, isVisible: true }); \r\n        });\r\n    },\r\n    clearFields() {\r\n      this.$refs.form.reset()\r\n      setTimeout(() => {\r\n        this.$refs.form.resetValidation()\r\n      }, 1); \r\n    }\r\n  },\r\n}\r\n</script>","import { render } from \"./exams-page.vue?vue&type=template&id=cba45890\"\nimport script from \"./exams-page.vue?vue&type=script&lang=js\"\nexport * from \"./exams-page.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"G:\\\\projects\\\\github\\\\ruby\\\\assessmentApi\\\\spa\\\\assessment_test_app\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementVNode","_createElementBlock","_createVNode","_component_va_form","ref","_component_va_select","label","$data","$event","options","rules","value","_component_va_input","length","_component_va_button","onClick","$options","_toDisplayString","_ctx","_hoisted_2","_component_va_data_table","items","setup","axios","inject","store","useStore","config","data","selectedCollege","examName","colleges","exams","async","collegeResponse","this","get","apiUrl","catch","error","console","log","map","college","text","name","reloadData","methods","self","$refs","form","validate","post","collegeId","id","then","commit","isSuccess","message","isVisible","clearFields","response","exam","reset","setTimeout","resetValidation","__exports__","render"],"sourceRoot":""}